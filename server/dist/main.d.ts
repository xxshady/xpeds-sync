// Generated by dts-bundle-generator v6.5.0

import * as alt from 'alt-server';
import * as xsync from 'altv-xsync-entity-server';

export declare type EntityData = Record<any, any>;
export interface IEntityPoolOptions {
	maxStreamedIn: number;
}
declare class EntityPool {
	readonly id: number;
	private static readonly pools;
	private _maxStreamedIn;
	constructor(id: number, { maxStreamedIn, }: Partial<IEntityPoolOptions>);
	get maxStreamedIn(): number;
}
declare class Entity<TSyncedMeta extends EntityData = EntityData, TMeta extends EntityData = EntityData> {
	readonly pool: EntityPool;
	private _pos;
	static get all(): Entity[];
	static getByID<T extends new (...args: any) => Entity>(this: T, id: number): InstanceType<T> | null;
	readonly id: number;
	private readonly internalInstance;
	private _valid;
	private readonly _syncedMeta;
	private readonly _meta;
	readonly dimension: number;
	readonly streamRange: number;
	readonly migrationRange: number;
	constructor(pool: EntityPool, _pos: alt.IVector3, syncedMeta?: TSyncedMeta, meta?: TMeta, dimension?: number, streamRange?: number, migrationRange?: number);
	get valid(): boolean;
	get pos(): alt.IVector3;
	set pos(value: alt.IVector3);
	get syncedMeta(): Readonly<TSyncedMeta>;
	get meta(): Readonly<TMeta>;
	destroy(): void;
	setSyncedMeta(value: Partial<TSyncedMeta>): void;
	setMeta(value: Partial<TMeta>): void;
}
export interface IXSyncPedSyncedMeta {
	model: number;
	health: number;
}
export declare type XSyncPedClass = {
	pool: xsync.EntityPool;
	new (pos: alt.IVector3, syncedMeta: IXSyncPedSyncedMeta): xsync.Entity;
};
export declare class XPedsSync {
	private static _instance;
	static get instance(): XPedsSync;
	private readonly log;
	readonly XSyncPed: XSyncPedClass;
	constructor(_xsync?: typeof xsync);
	private emitAltClient;
	private onEntityNetOwnerChange;
	private onPlayerConnect;
}
export declare class Ped {
	private readonly xsyncInstance;
	constructor(model: number, pos: alt.IVector3);
}

export {};
