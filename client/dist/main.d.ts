// Generated by dts-bundle-generator v6.9.0

import * as alt from 'alt-client';
import * as xsync from 'altv-xsync-entity-client';
import { IXSyncPedSyncedMeta } from 'xpeds-sync-shared';

export interface IXPedsSyncOptions {
	nametags?: boolean;
}
export declare class XPedsSync {
	private static _instance;
	static get instance(): XPedsSync;
	private readonly log;
	private readonly onServerEvents;
	constructor(_xsync?: typeof xsync, options?: IXPedsSyncOptions);
}
declare class XSyncPed extends xsync.Entity<IXSyncPedSyncedMeta> {
	private static _pool;
	static get pool(): xsync.EntityPool<XSyncPed>;
	static initPool(id: number): void;
}
export interface IGamePedOptions {
	pos: alt.IVector3;
	model: number;
	health: number;
}
declare class GamePed implements IPedController {
	private static readonly peds;
	private _scriptID;
	private readonly options;
	private spawnListener;
	constructor(xsyncPed: XSyncPed, options: IGamePedOptions);
	get scriptID(): number;
	get pos(): alt.Vector3;
	set pos({ x, y, z }: alt.IVector3);
	get health(): number;
	set health(value: number);
	get ragdoll(): boolean;
	set ragdoll(value: boolean);
	get isWalking(): boolean;
	get heading(): number;
	waitForSpawn(): Promise<void>;
	destroy(): void;
	setVelocity({ x, y, z }: alt.IVector3): void;
	gotoCoord({ x, y, z }: alt.IVector3, speed: number, heading: number): void;
	resurrect(health: number): void;
	private createPed;
	private destroyInGame;
}
declare class InternalPed {
	readonly xsyncPed: XSyncPed;
	static readonly streamedIn: Set<InternalPed>;
	private static readonly pedsByXsync;
	static onStreamIn(xsyncPed: XSyncPed): void;
	static onStreamOut(xsyncPed: XSyncPed): void;
	static onSyncedMetaChange(xsyncPed: XSyncPed, meta: Partial<IXSyncPedSyncedMeta>): void;
	static onPosChange(xsyncPed: XSyncPed, pos: alt.IVector3): void;
	static onNetOwnerChange(xsyncPed: XSyncPed, netOwnered: boolean): void;
	readonly publicInstance: Ped;
	readonly gamePed: GamePed;
	private valid;
	private netOwnerPed;
	private observerPed;
	constructor(xsyncPed: XSyncPed);
	sendNetOwnerPosUpdate(pos: alt.IVector3): void;
	sendNetOwnerSyncedMetaUpdate(meta: Partial<IXSyncPedSyncedMeta>): void;
	private destroy;
	private initNetOwner;
	private removeNetOwner;
}
export interface IPedController {
	destroy(): void;
}
export declare class Ped {
	readonly id: number;
	private readonly internalInstance;
	static get streamedIn(): Ped[];
	constructor(id: number, internalInstance: InternalPed);
	get scriptID(): number;
	get pos(): alt.Vector3;
	netOwnered(): boolean;
}

export {};
